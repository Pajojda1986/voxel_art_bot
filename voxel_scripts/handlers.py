from aiogram import types
from aiogram.types.message import ContentType
from random import randint, choices
import string
import os
import sqlite3 as sq
from voxel_scripts import database as db
from aiogram.dispatcher import FSMContext
from voxel_scripts import keyboards as kb
from voxel_scripts import class_voxel as cls
from voxel_scripts.payments import order, order_2, order_3

from main import dp, bot

all_photo = {}
all_cloak = {}
all_totem = {}
all_4d = {}
all_3D_avatar = {}

async def get_ord_skin(message, state, dictionary, rand=None, price=None):

    data = await state.get_data()
    hand_type = data.get('hand_type')
    artist_name = data.get('artist')
    artist_id = data.get('artist_id')

    description = data.get('description')

    ord = (message.from_user.id, artist_id, artist_name, hand_type, price, description, dictionary[message.from_user.id], rand)
    print(ord)
    return ord


async def get_ord_other(message, state, dictionary, type_ord, artist_id=None, artist_name=None, totem_type=None, rand=None, price=None):
    data = await state.get_data()

    if artist_id is None and artist_name is None:
        artist = db.get_artists_info(all=1)
        artist_name = []
        artist_id = []
        for i in artist['skin']:
            artist_name.append(i[1])
            artist_id.append(i[0])

        random_id = randint(0, len(artist_name) - 1)
        artist_name = artist_name[random_id]
        artist_id = artist_id[random_id]

    description = data.get(type_ord)
    if totem_type is not None:
        ord = (message.from_user.id, artist_id, artist_name, totem_type, price, description, dictionary[message.from_user.id], rand)
        return ord
    else:
        ord = (message.from_user.id, artist_id, artist_name, price, description, dictionary[message.from_user.id], rand)
        return ord


async def final_other(message, state, count_photo, dictionary, name_order, type=None):
    data = await state.get_data()
    description = data.get('description')

    await message.answer("–í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑:")
    if type is not None:
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ {name_order}: {description},\n–¢–∏–ø {name_order}: {type}",
                             reply_markup=kb.other_final_panel)
    else:
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ {name_order}: {description}", reply_markup=kb.other_final_panel)
    if len(dictionary[message.from_user.id]) == 0:
        await message.answer("–í—ã –Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

    else:
        if len(dictionary[message.from_user.id]) > count_photo:
            await message.answer(f"–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ {count_photo} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
            del dictionary[message.from_user.id][count_photo:]
        for i in dictionary[message.from_user.id]:
            try:
                await bot.send_photo(message.chat.id, str(i))
            except:
                pass
            try:
                await bot.send_document(message.chat.id, str(i))
            except:
                pass


async def final_order(message, state, key=1):
    data = await state.get_data()
    hand_type = data.get('hand_type')
    artist = data.get('artist')
    description = data.get('description')
    totem_type = data.get('totem_type')
    description_cloak = data.get('cloak_description')
    description_totem = data.get("totem_description")
    await message.answer("–í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑:")

    await message.answer(f"–í—ã–±—Ä–∞–Ω—ã–π –≤–∞–º–∏ —Ç–∏–ø —Ä—É–∫: {hand_type},\n–í—ã–±—Ä–∞–Ω—ã–π –≤–∞–º–∏ —Ö—É–¥–æ–∂–Ω–∏–∫: {artist},"
                         f"\n–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {description}", reply_markup=kb.final_panel_skin)

    if len(all_photo[message.from_user.id]) == 0:
        await message.answer("–í—ã –Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

    else:
        if len(all_photo[message.from_user.id]) > 5:
            await message.answer("–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –ø—è—Ç–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
            del all_photo[message.from_user.id][5:]
        for i in all_photo[message.from_user.id]:
            try:
                await bot.send_photo(message.chat.id, str(i))
            except:
                pass
            try:
                await bot.send_document(message.chat.id, str(i))
            except:
                pass

    if description_totem and description_totem != "–ù–∞–∑–∞–¥" and description_totem != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" and key == 1:
        print(description_totem)
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ç–µ–º–∞: {description_totem},"
                             f"\n–¢–∏–ø —Ç–æ—Ç–µ–º–∞: {totem_type}", reply_markup=kb.other_final_panel)

        if len(all_totem[message.from_user.id]) == 0:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

        else:
            if len(all_totem[message.from_user.id]) > 2:
                await message.answer("–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –¥–≤—É—Ö –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
                del all_totem[message.from_user.id][2:]
            for i in all_totem[message.from_user.id]:
                try:
                    await bot.send_photo(message.chat.id, str(i))
                except:
                    pass
                try:
                    await bot.send_document(message.chat.id, str(i))
                except:
                    pass

    if description_cloak and description_cloak != "–ù–∞–∑–∞–¥" and description_cloak != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" and key == 1:
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—â–∞: {description_cloak}", reply_markup=kb.other_final_panel)

        if len(all_cloak[message.from_user.id]) == 0:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

        else:
            if len(all_cloak[message.from_user.id]) > 3:
                await message.answer("–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –¥–≤—É—Ö –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
                del all_cloak[message.from_user.id][2:]
            for i in all_cloak[message.from_user.id]:
                try:
                    await bot.send_photo(message.chat.id, str(i))
                except:
                    pass
                try:
                    await bot.send_document(message.chat.id, str(i))
                except:
                    pass

async def order_photo(message, dictionary):
    try:
        if message.document:
            documents_id = message.document.file_id
            dictionary[message.from_user.id].append(documents_id)
            print(dictionary[message.from_user.id])
            print('–¥–æ–∫—É–º–µ–Ω—Ç')

    except:
        if message.photo:
            photo_id = message.photo[2].file_id
            dictionary[message.from_user.id].append(photo_id)
            print(dictionary[message.from_user.id])
            print('—Ñ–æ—Ç–æ')

    if message.text == '–û—á–∏—Å—Ç–∏—Ç—å':
        del dictionary[message.from_user.id][::]
        await message.answer("–°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ —Ñ–∞–π–ª–æ–≤ –±—ã–ª –æ—á–∏—â–µ–Ω!", reply_markup=kb.photo_panel)


@dp.message_handler(text='–ú–µ–Ω—é')
@dp.message_handler(commands=['start'])
@dp.message_handler(text='–ù–∞–∑–∞–¥')
async def cmd_start(message: types.Message):
    db.get_artists_info()
    all_photo[message.from_user.id] = []
    all_totem[message.from_user.id] = []
    all_cloak[message.from_user.id] = []
    await db.cmd_start_db(message.from_user.id)
    await message.answer(f'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}! –Ø - –í–æ–∫—Å–µ–ª—å, –±–æ—Ç, '
                         f'–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Å –∑–∞–∫–∞–∑–æ–º. –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, '
                         f'–Ω–∞–ø–∏—à–∏—Ç–µ "–¢–æ–≤–∞—Ä—ã" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. üëá', reply_markup=kb.main)

    print(message.chat.id)
    if str(message.from_user.id) in db.get_artists_info():
        await message.answer(f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ —Ö—É–¥–æ–∂–Ω–∏–∫', reply_markup=kb.artist_keyboard)


@dp.message_handler(text='–û—Ç–∑—ã–≤—ã', state=None)
async def cmd_text(message: types.Message):
    await message.answer('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –í—ã —Å–º–æ–∂–µ—Ç–µ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ VK https://vk.com/lootskinsstudio?w=app6326142_-222235507')

@dp.message_handler(text='–£—Å–ª—É–≥–∏', state=None)
async def cmd_text(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)

@dp.message_handler(text='–°–ø–µ—Ü-–∑–∞–∫–∞–∑', state=None)
async def spez(message: types.Message):
    await message.answer('–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–∏–Ω–æ–≤ –∏–ª–∏ –ø—Ä–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ —Ç–µ–∫—Å—Ç—É—Ä–ø–∞–∫,'
                         ' 3D –∞—Ä—Ç –∏–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –í–ö, –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π. '
                         '–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: https://vk.com/lootskinsstudio')

@dp.message_handler(text='–¢–æ—Ç–µ–º (2D/3D)', state=None)
async def totem(message: types.Message):
    all_totem[message.from_user.id] = []
    await message.answer('–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–≥—Ä–æ–∫ —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–æ—Å–∏—Ç –≤ —Ä—É–∫–µ? '
                         '–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ—Ç–µ–º –±–µ—Å—Å–º–µ—Ä—Ç–∏—è! –ò–∑ –Ω–µ–≥–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ë - –æ—Ç –∑–∞–±–∞–≤–Ω–æ–π —Å—Ç–∞—Ç—É—ç—Ç–∫–∏ —Å '
                         '–í–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –¥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞.', reply_markup=kb.cancel_panel)
    await message.answer('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –í–∞—à —Ç–æ—Ç–µ–º - 2D –∏–ª–∏ 3D', reply_markup=kb.type_totem_panel)

    await cls.OrderTotem.type.set()


@dp.message_handler(state=cls.OrderTotem.type, content_types=["text"])
async def totem(message: types.Message, state: FSMContext):
    if message.text == '2D' or message.text == '3D':
        item = message.text
        await state.update_data(
            {
                'totem_type': item
            }
        )
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–æ—Ç–µ–º–∞.", reply_markup=kb.cancel_panel)
        await cls.OrderTotem.next()

    elif message.text == '–ù–∞–∑–∞–¥' or message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()

    else:
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Ç–æ—Ç–µ–º–∞! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")


@dp.message_handler(state=cls.OrderTotem.description, content_types=["text"])
async def totem(message: types.Message, state: FSMContext):
    if (message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" or message.text != '–ù–∞–∑–∞–¥') and not ("'" in message.text or '"' in message.text):
        item = message.text
        print(item)
        await state.update_data(
            {
                'description': item
            }
        )

    if message.text != '–ù–∞–∑–∞–¥' and not "'" in message.text and not '"' in message.text:
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                             ".jpeg –∏–ª–∏ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .png –±–µ–∑ —Å–∂–∞—Ç–∏—è, "
                             "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—É—á—à–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏! "
                             "–ü–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'", reply_markup=kb.photo_panel)
        await cls.OrderTotem.next()

    elif "'" in message.text or '"' in message.text:
        await message.answer("–£–±–µ—Ä–∏—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞!")

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –í–∞—à —Ç–æ—Ç–µ–º - 2D –∏–ª–∏ 3D", reply_markup=kb.type_totem_panel)
        await cls.OrderTotem.previous()


@dp.message_handler(state=cls.OrderTotem.photo, content_types=['document', 'photo', 'text'])
async def avatar(message: types.Message, state: FSMContext):
    await order_photo(message, all_totem)
    data = await state.get_data()
    type_totem = data.get('totem_type')

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        await final_other(message, state, 2, all_totem, '–¢–æ—Ç–µ–º–∞', type=type_totem)

    elif message.text == "–û–ø–ª–∞—Ç–∞":
        if type_totem == "2D":
            await order(message, bot, ord='2D —Ç–æ—Ç–µ–º', price_1=49)

        elif type_totem == "3D":
            await order(message, bot, ord='3D —Ç–æ—Ç–µ–º', price_1=79)

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π –¢–æ—Ç–µ–º, '
                             '–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∂–Ω–∏–º, '
                             '–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', reply_markup=kb.cancel_panel)
        await cls.OrderTotem.description.set()

    elif message.text == '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()


@dp.pre_checkout_query_handler(lambda query: True, state=cls.OrderTotem.photo)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(state=cls.OrderTotem.photo, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message, state: FSMContext):
    print('–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û')

    ran = ''.join(choices(string.ascii_uppercase + string.digits, k=10))

    data = await state.get_data()
    type_totem = data.get('totem_type')
    if type_totem == "2D":
        ord = await get_ord_other(message, state, all_totem, 'description', totem_type=type_totem, rand=ran, price=49)
    else:
        ord = await get_ord_other(message, state, all_totem, 'description', totem_type=type_totem, rand=ran, price=79)

    await db.new_count_order()
    await db.totem(ord, message=message)
    await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤—Å–∫–æ—Ä–µ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"')
    await message.answer('–ü–æ–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∫–∏–Ω—ã –∏ –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://www.youtube.com/playlist?list=PLVe49ImhHc6k2VwaXj-Hz6GRUU_nFyl16')
    await state.finish()
    await cmd_start(message)


@dp.message_handler(text='3D –∞–≤–∞—Ç–∞—Ä', state=None)
async def avatar(message: types.Message):
    all_3D_avatar[message.from_user.id] = []
    await message.answer('üë® –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –í–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º!', reply_markup=kb.cancel_panel)
    await message.answer('–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π –∞–≤–∞—Ç–∞—Ä')

    await cls.Order3dAvatar.description.set()


@dp.message_handler(state=cls.Order3dAvatar.description, content_types=["text"])
async def avatar(message: types.Message, state: FSMContext):
    if (message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" or message.text != '–ù–∞–∑–∞–¥') and not ("'" in message.text or '"' in message.text):
        item = message.text
        print(item)
        await state.update_data(
            {
                'description': item
            }
        )


    if message.text != '–ù–∞–∑–∞–¥' and "'" not in message.text and not'"' in message.text:
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                             ".jpeg, –∞ —Ç–∞–∫–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .png –±–µ–∑ —Å–∂–∞—Ç–∏—è, "
                             "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—É—á—à–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!", reply_markup=kb.photo_panel)
        await cls.Order3dAvatar.next()

    elif "'" in message.text or '"' in message.text:
        await message.answer("–£–±–µ—Ä–∏—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞!")

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()


@dp.message_handler(state=cls.Order3dAvatar.photo, content_types=['document', 'photo', 'text'])
async def avatar(message: types.Message, state: FSMContext):
    await order_photo(message, all_3D_avatar)

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        await final_other(message, state, 3, all_3D_avatar, '–ê–≤–∞—Ç–∞—Ä–∞')

    elif message.text == "–û–ø–ª–∞—Ç–∞":
        await order(message, bot, ord='–ü–ª–∞—â', price_1=199)

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π 3D –ê–≤–∞—Ç–∞—Ä', reply_markup=kb.cancel_panel)
        await cls.Order3dAvatar.description.set()

    elif message.text == '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()


@dp.pre_checkout_query_handler(lambda query: True, state=cls.Order3dAvatar.photo)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(state=cls.Order3dAvatar.photo, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message, state: FSMContext):
    print('–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û')
    ran = ''.join(choices(string.ascii_uppercase + string.digits, k=10))
    ord = await get_ord_other(message, state, all_3D_avatar, 'description', rand=ran, price=199)
    await db.new_count_order()
    await db.avatar(ord, message=message)
    await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤—Å–∫–æ—Ä–µ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"')
    await message.answer(
        '–ü–æ–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∫–∏–Ω—ã –∏ –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://www.youtube.com/playlist?list=PLVe49ImhHc6k2VwaXj-Hz6GRUU_nFyl16')
    await state.finish()
    await cmd_start(message)


@dp.message_handler(text='–ü–ª–∞—â', state=None)
async def cloak(message: types.Message):
    all_cloak[message.from_user.id] = []
    await message.answer('–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—â–µ–π, '
                         '–¥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ, –Ω–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–∞ Advanced Capes Mod –º–æ–∂–Ω–æ '
                         '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞—â —Å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ª—é–±—ã–º —Ä–∏—Å—É–Ω–∫–æ–º! '
                         '–ú—ã —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ –í–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é!', reply_markup=kb.cancel_panel)
    await message.answer('–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π –ø–ª–∞—â')

    await cls.OrderCloak.description.set()


@dp.message_handler(state=cls.OrderCloak.description, content_types=["text"])
async def cloak(message: types.Message, state: FSMContext):
    if (message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" or message.text != '–ù–∞–∑–∞–¥') and not ("'" in message.text or '"' in message.text):
        item = message.text
        await state.update_data(
            {
                'description': item
            }
        )

    if message.text != '–ù–∞–∑–∞–¥' and not "'" in message.text and '"' not in message.text:
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ 4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                             ".jpeg –∏–ª–∏ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .png –±–µ–∑ —Å–∂–∞—Ç–∏—è, "
                             "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—É—á—à–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!", reply_markup=kb.photo_panel)
        await cls.OrderCloak.next()

    elif "'" in message.text or '"' in message.text:
        await message.answer("–£–±–µ—Ä–∏—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞!")

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()


@dp.message_handler(state=cls.OrderCloak.photo, content_types=['document', 'photo', 'text'])
async def cloak(message: types.Message, state: FSMContext):
    await order_photo(message, all_cloak)

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        await final_other(message, state, 4, all_cloak, '–ü–ª–∞—â–∞')

    elif message.text == '–û–ø–ª–∞—Ç–∞':
        await order(message, bot, ord='–ü–ª–∞—â', price_1=79)

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π –ü–ª–∞—â', reply_markup=kb.cancel_panel)
        await cls.OrderCloak.description.set()

    elif message.text == '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()


@dp.pre_checkout_query_handler(lambda query: True, state=cls.OrderCloak.photo)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(state=cls.OrderCloak.photo, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message, state: FSMContext):
    print('–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û')
    ran = ''.join(choices(string.ascii_uppercase + string.digits, k=10))
    ord = await get_ord_other(message, state, all_cloak, 'description', rand=ran, price=79)
    await db.new_count_order()
    await db.cloak(ord, message=message)
    await message.answer(
        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤—Å–∫–æ—Ä–µ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"')
    await message.answer(
        '–ü–æ–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∫–∏–Ω—ã –∏ –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://www.youtube.com/playlist?list=PLVe49ImhHc6k2VwaXj-Hz6GRUU_nFyl16')
    await state.finish()
    await cmd_start(message)


@dp.message_handler(text='4D —Å–∫–∏–Ω (Java)', state=None)
async def skin4D(message: types.Message):
    all_4d[message.from_user.id] = []
    await message.answer('4D —Å–∫–∏–Ω - –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–∞—è –º–æ–¥–µ–ª—å –í–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! '
                         '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 4D —Å–∫–∏–Ω, –Ω–µ–æ–±—Ö–æ–¥–∏–º –º–æ–¥ Figura: '
                         'https://modrinth.com/mod/figura –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–æ–π —Å–∫–∏–Ω: '
                         '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é', reply_markup=kb.cancel_panel)
    await message.answer('–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π 4D —Å–∫–∏–Ω.')

    await cls.OrderSkin4D.description.set()


@dp.message_handler(state=cls.OrderSkin4D.description, content_types=["text"])
async def skin4D(message: types.Message, state: FSMContext):
    if (message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" or message.text != '–ù–∞–∑–∞–¥') and not ("'" in message.text or '"' in message.text):
        item = message.text
        print(item)
        await state.update_data(
            {
                'description': item
            }
        )

    if message.text != '–ù–∞–∑–∞–¥' and "'" not in message.text and '"' not in message.text:
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                             ".jpeg –∏–ª–∏ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .png –±–µ–∑ —Å–∂–∞—Ç–∏—è, "
                             "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—É—á—à–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!", reply_markup=kb.photo_panel)
        await cls.OrderSkin4D.next()

    elif "'" in message.text or '"' in message.text:
        await message.answer("–£–±–µ—Ä–∏—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞!")

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()


@dp.message_handler(state=cls.OrderSkin4D.photo, content_types=['document', 'photo', 'text'])
async def skin4D(message: types.Message, state: FSMContext):
    await order_photo(message, all_4d)

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        await final_other(message, state, 5, all_4d, '4D —Å–∫–∏–Ω–∞')

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π 4D —Å–∫–∏–Ω.', reply_markup=kb.cancel_panel)
        await cls.OrderSkin4D.description.set()

    elif message.text == '–û–ø–ª–∞—Ç–∞':
        await order(message, bot, ord='4D –°–∫–∏–Ω', price_1=399)

    elif message.text == '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()


@dp.pre_checkout_query_handler(lambda query: True, state=cls.OrderSkin4D.photo)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(state=cls.OrderSkin4D.photo, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message, state: FSMContext):
    print('–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û')
    ran = ''.join(choices(string.ascii_uppercase + string.digits, k=10))
    ord = await get_ord_other(message, state, all_4d, 'description', rand=ran, price=399)
    await db.new_count_order()
    await db.skin_4d(ord, message=message)
    await message.answer(
        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤—Å–∫–æ—Ä–µ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"')
    await message.answer(
        '–ü–æ–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∫–∏–Ω—ã –∏ –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://www.youtube.com/playlist?list=PLVe49ImhHc6k2VwaXj-Hz6GRUU_nFyl16')
    await state.finish()
    await cmd_start(message)


@dp.message_handler(text='–°–∫–∏–Ω', state=None)
async def order_skin(message: types.Message):
    all_photo[message.from_user.id] = []
    all_totem[message.from_user.id] = []
    all_cloak[message.from_user.id] = []
    await message.answer('–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º, –∫–∞–∫–∏–µ —Ä—É–∫–∏ –±—É–¥—É—Ç —É –í–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ - '
                         '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ, –∫–∞–∫ —É –°—Ç–∏–≤–∞, –∏–ª–∏ —Ç–æ–Ω–∫–∏–µ, –∫–∞–∫ —É –ê–ª–µ–∫—Å?', reply_markup=kb.hands_panel)

    await cls.OrderSkin.hand_type.set()


@dp.message_handler(state=cls.OrderSkin.hand_type, content_types=["text"])
async def order_skin(message: types.Message, state: FSMContext):
    if message.text == '–¢–æ–Ω–∫–∏–µ' or message.text == '–û–±—ã—á–Ω—ã–µ':
        item = message.text
        await state.update_data(
            {
                'hand_type': item
            }
        )
        await message.answer("üë®‚Äçüé® –£ –Ω–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤, "
                             "—É –∫–∞–∂–¥–æ–≥–æ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–≤–æ–π –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π —Å—Ç–∏–ª—å! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≥–æ, "
                             "–∫—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –í–∞—à –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–¥–∞—Ç—å –µ–≥–æ "
                             "—Å–ª—É—á–∞–π–Ω–æ–º—É —Ö—É–¥–æ–∂–Ω–∏–∫—É üé≤", reply_markup= kb.artist_panel())
        await cls.OrderSkin.next()

    elif message.text == '–ù–∞–∑–∞–¥' or message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()

    else:
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Ä—É–∫! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")


@dp.message_handler(state=cls.OrderSkin.artist)
async def order_skin(message: types.Message, state: FSMContext):
    artist = db.get_artists_info(all=1)
    artist_name = []
    artist_id = []
    for i in artist['skin']:
        artist_name.append(i[1])
        artist_id.append(i[0])

    if message.text in artist_name or message.text == '–°–ª—É—á–∞–π–Ω–æ':
        if message.text != '–°–ª—É—á–∞–π–Ω–æ':
            for i in artist_name:
                if message.text == i:
                    name = i
                    id = artist_id[artist_name.index(i)]
                    await state.update_data(
                        {
                            'artist': name,
                            'artist_id': id
                        }
                    )
                    await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π —Å–∫–∏–Ω. ", reply_markup=kb.cancel_panel)
                    await cls.OrderSkin.next()

        elif message.text == '–°–ª—É—á–∞–π–Ω–æ':
            random_id = randint(0, len(artist_name) - 1)
            random_artist = artist_name[random_id]
            random_artist_id = artist_id[random_id]
            print(random_artist)
            print(random_artist_id)

            await state.update_data(
                {
                    'artist': random_artist,
                    'artist_id': random_artist_id
                }
            )
            await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –±—É–¥—É—â–∏–π —Å–∫–∏–Ω. "
                                 "–ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ", reply_markup=kb.cancel_panel)
            await cls.OrderSkin.next()

    elif message.text == '–ù–∞–∑–∞–¥':
        await cls.OrderSkin.previous()
        await message.answer('–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º, –∫–∞–∫–∏–µ —Ä—É–∫–∏ –±—É–¥—É—Ç —É –í–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ, '
                             '–∫–∞–∫ —É –°—Ç–∏–≤–∞, –∏–ª–∏ —Ç–æ–Ω–∫–∏–µ, –∫–∞–∫ —É –ê–ª–µ–∫—Å?', reply_markup=kb.hands_panel)

    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()

    else:
        await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∞! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å '
                             '—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤–ø–∏—à–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"', reply_markup = kb.artist_panel())


@dp.message_handler(state=cls.OrderSkin.description)
async def order_skin(message: types.Message, state: FSMContext):
    if (message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" and message.text != '–ù–∞–∑–∞–¥') and not ("'" in message.text or '"' in message.text):
        item = message.text
        print(item)
        await state.update_data(
            {
                'description': item
            }
        )

    if message.text != '–ù–∞–∑–∞–¥' and "'" not in message.text and not '"' in message.text:
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                             ".jpeg –∏–ª–∏ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .png –±–µ–∑ —Å–∂–∞—Ç–∏—è, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ "
                             "–ª—É—á—à–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!", reply_markup=kb.photo_panel)
        await cls.OrderSkin.next()
    elif "'" in message.text or '"' in message.text:
        await message.answer("–£–±–µ—Ä–∏—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞!")

    elif message.text == '–ù–∞–∑–∞–¥':
        await cls.OrderSkin.previous()
        await message.answer("üë®‚Äçüé® –£ –Ω–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤, "
                             "—É –∫–∞–∂–¥–æ–≥–æ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–≤–æ–π –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π —Å—Ç–∏–ª—å! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ –±—É–¥–µ—Ç "
                             "–≤—ã–ø–æ–ª–Ω—è—Ç—å –í–∞—à –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–¥–∞—Ç—å –µ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–º—É —Ö—É–¥–æ–∂–Ω–∏–∫—É üé≤", reply_markup = kb.artist_panel())


@dp.message_handler(state=cls.OrderSkin.photo, content_types=['document', 'photo', 'text'])
async def order_skin(message: types.Message, state: FSMContext):
    await order_photo(message, all_photo)

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':

        await final_order(message, state, key=2)
        await message.answer('–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë –∫ –í–∞—à–µ–º—É –∑–∞–∫–∞–∑—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ—Ç–µ–º –∏–ª–∏ –ø–ª–∞—â? üòÅ')

    elif message.text == '–•–æ—á—É!':
        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É —Ç–æ—Ç–µ–º?', reply_markup=kb.agreement_panel)
        await cls.OrderSkin.additional_goods.set()

    elif message.text == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ!":
        await order(message, bot, ord='–°–∫–∏–Ω', price_1=249)

    elif message.text == "–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞":
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ‚úèÔ∏è', reply_markup=kb.goods)
        await state.finish()

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –í–∞—à –±—É–¥—É—â–∏–π —Å–∫–∏–Ω! "
                             "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∂–Ω–∏–º –≤–≤–µ–¥–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'", reply_markup=kb.cancel_panel)
        await cls.OrderSkin.previous()


@dp.pre_checkout_query_handler(lambda query: True, state=cls.OrderSkin.photo)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(state=cls.OrderSkin.photo, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message, state: FSMContext):
    print('–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û')
    ran = ''.join(choices(string.ascii_uppercase + string.digits, k=10))
    ord = await get_ord_skin(message, state, all_photo, rand=ran, price=249)
    await db.new_count_order()
    await db.skin(ord, message=message)
    await message.answer(
        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤—Å–∫–æ—Ä–µ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã".')
    await message.answer('–ö—Å—Ç–∞—Ç–∏, –≤—Å–µ –Ω–∞—à–∏ —Å–∫–∏–Ω—ã —É–º–µ—é—Ç –º–æ—Ä–≥–∞—Ç—å. üëÄ')
    await message.answer(
        '–ü–æ–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∫–∏–Ω—ã –∏ –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://www.youtube.com/playlist?list=PLVe49ImhHc6k2VwaXj-Hz6GRUU_nFyl16')
    await state.finish()
    await cmd_start(message)


@dp.message_handler(state=cls.OrderSkin.additional_goods, content_types=['text'])
async def order_skin(message: types.Message):
    if message.text == '–î–∞':
        await message.answer("–ö–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–≥—Ä–æ–∫ —á–∞—â–µ –≤—Å–µ–≥–æ –Ω–æ—Å–∏—Ç –≤ —Ä—É–∫–µ? –ö–æ–Ω–µ—á–Ω–æ, "
                             "—Ç–æ—Ç–µ–º –±–µ—Å—Å–º–µ—Ä—Ç–∏—è! –ò–∑ –Ω–µ–≥–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ë - –æ—Ç –∑–∞–±–∞–≤–Ω–æ–π —Å—Ç–∞—Ç—É—ç—Ç–∫–∏ —Å "
                             "–í–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –¥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –í–∞—à —Ç–æ—Ç–µ–º - 2D –∏–ª–∏ 3D", reply_markup=kb.type_totem_panel)
        await cls.OrderSkin.next()

    elif message.text == '–ù–µ—Ç':
        await message.answer("–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É –ø–ª–∞—â?", reply_markup=kb.agreement_panel)
        await cls.OrderSkin.cloak_description.set()

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –í–∞—à –±—É–¥—É—â–∏–π —Å–∫–∏–Ω! "
                             "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∂–Ω–∏–º –≤–≤–µ–¥–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'", reply_markup=kb.cancel_panel)
        await cls.OrderSkin.description.set()


@dp.message_handler(state=cls.OrderSkin.totem_type, content_types=['text'])
async def order_skin(message: types.Message, state: FSMContext):
    if message.text == '2D' or message.text == '3D':
        item = message.text
        await state.update_data(
            {
                'totem_type': item
            }
        )
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–æ—Ç–µ–º–∞.", reply_markup=kb.cancel_panel)
        await cls.OrderSkin.next()

    elif message.text == "–ù–∞–∑–∞–¥":

        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É —Ç–æ—Ç–µ–º?', reply_markup=kb.agreement_panel)
        await cls.OrderSkin.additional_goods.set()

    else:
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Ç–æ—Ç–µ–º–∞!")


@dp.message_handler(state=cls.OrderSkin.totem_description, content_types=['text'])
async def order_skin(message: types.Message, state: FSMContext):
    if (message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" and message.text != '–ù–∞–∑–∞–¥') and not ("'" in message.text or '"' in message.text):
        item = message.text
        print(item)
        await state.update_data(
            {
                'totem_description': item
            }
        )

    if message.text != '–ù–∞–∑–∞–¥' and not "'" in message.text and not '"' in message.text:
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                             ".jpeg –∏–ª–∏ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .png –±–µ–∑ —Å–∂–∞—Ç–∏—è, "
                             "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—É—á—à–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏! –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ, "
                             "–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'", reply_markup=kb.photo_panel)
        await cls.OrderSkin.next()

    elif "'" in message.text or '"' in message.text:
        await message.answer("–£–±–µ—Ä–∏—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞!")

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–º –±—É–¥–µ—Ç –í–∞—à —Ç–æ—Ç–µ–º - 2D –∏–ª–∏ 3D", reply_markup=kb.type_totem_panel)
        await cls.OrderSkin.totem_type.set()


@dp.message_handler(state=cls.OrderSkin.totem_photo, content_types=['document', 'photo', 'text'])
async def order_skin(message: types.Message, state: FSMContext):
    await order_photo(message, all_totem)

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        data = await state.get_data()
        description = data.get('totem_description')
        totem_type = data.get('totem_type')

        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ç–µ–º–∞: {description},"
                             f"\n–¢–∏–ø —Ç–æ—Ç–µ–º–∞: {totem_type}", reply_markup=kb.cancel_panel)

        if len(all_totem[message.from_user.id]) == 0:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

        else:
            if len(all_totem[message.from_user.id]) > 3:
                await message.answer("–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –¥–≤—É—Ö –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!")
                del all_totem[message.from_user.id][2:]
            for i in all_totem[message.from_user.id]:
                try:
                    await bot.send_photo(message.chat.id, str(i))
                except:
                    pass
                try:
                    await bot.send_document(message.chat.id, str(i))
                except:
                    pass

        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—â –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É?', reply_markup=kb.agreement_panel)

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–æ—Ç–µ–º–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∂–Ω–∏–º –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', reply_markup=kb.cancel_panel)
        await cls.OrderSkin.previous()

    elif message.text == '–î–∞':
        await message.answer("–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—â–µ–π, "
                             "–¥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ, –Ω–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–∞ Advanced Capes Mod –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å "
                             "–ø–ª–∞—â —Å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ª—é–±—ã–º —Ä–∏—Å—É–Ω–∫–æ–º! –ú—ã —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ –í–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é!")
        await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –í–∞—à –±—É–¥—É—â–∏–π –ø–ª–∞—â.", reply_markup=kb.cancel_panel)
        await cls.OrderSkin.cloak_description2.set()

    elif message.text == "–ù–µ—Ç":
        await final_order(message, state)

    elif message.text == "–û–ø–ª–∞—Ç–∞":
        data = await state.get_data()
        totem_type = data.get('totem_type')

        if totem_type == '2D':
            await order_2(message, bot, '—Å–∫–∏–Ω', '2D —Ç–æ—Ç–µ–º', 249, 49)
        elif totem_type == '3D':
            await order_2(message, bot, '—Å–∫–∏–Ω', '3D —Ç–æ—Ç–µ–º', 249, 79)


@dp.pre_checkout_query_handler(lambda query: True, state=cls.OrderSkin.totem_photo)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(state=cls.OrderSkin.totem_photo, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message, state: FSMContext):
    print('–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û')
    data = await state.get_data()
    artist_name = data.get('artist')
    totem_type = data.get('totem_type')
    artist_id = data.get('artist_id')

    ran = ''.join(choices(string.ascii_uppercase + string.digits, k=10))
    await db.new_count_order()
    ord = await get_ord_skin(message, state, all_photo, rand=ran, price=249)
    await db.skin(ord, message=message)
    if totem_type == '2D':
        ord_totem = await get_ord_other(message, state, all_totem, 'totem_description', artist_id, artist_name,
                                      totem_type=totem_type, rand=ran, price=49)
        await db.totem(ord_totem, message=message)
    if totem_type == '3D':
        ord_totem = await get_ord_other(message, state, all_totem, 'totem_description', artist_id, artist_name,
                                        totem_type=totem_type, rand=ran, price=79)
        await db.totem(ord_totem, message=message)
    await message.answer(
        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤—Å–∫–æ—Ä–µ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"')
    await message.answer('–ö—Å—Ç–∞—Ç–∏, –≤—Å–µ –Ω–∞—à–∏ —Å–∫–∏–Ω—ã —É–º–µ—é—Ç –º–æ—Ä–≥–∞—Ç—å. üëÄ')
    await message.answer(
        '–ü–æ–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∫–∏–Ω—ã –∏ –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://www.youtube.com/playlist?list=PLVe49ImhHc6k2VwaXj-Hz6GRUU_nFyl16')
    await state.finish()
    await cmd_start(message)


@dp.message_handler(state=cls.OrderSkin.cloak_description, content_types=['text'])
async def order_skin(message: types.Message):
    if message.text == '–î–∞':
        await message.answer("–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—â–µ–π, "
                             "–¥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ, –Ω–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–∞ Advanced Capes Mod –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ")
        await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –í–∞—à –±—É–¥—É—â–∏–π –ø–ª–∞—â.", reply_markup=kb.cancel_panel)
        await cls.OrderSkin.cloak_description2.set()

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É —Ç–æ—Ç–µ–º?', reply_markup=kb.agreement_panel)
        await cls.OrderSkin.additional_goods.set()

    elif message.text == '–ù–µ—Ç':
        await message.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–π–¥—ë–º –∫ –æ–ø–ª–∞—Ç–µ!')
        await order(message, bot, ord='–°–∫–∏–Ω', price_1=249)


@dp.pre_checkout_query_handler(lambda query: True, state=cls.OrderSkin.cloak_description)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(state=cls.OrderSkin.cloak_description, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message, state: FSMContext):
    print('–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û')
    ran = ''.join(choices(string.ascii_uppercase + string.digits, k=10))
    ord = await get_ord_skin(message, state, all_photo, rand=ran, price=249)
    await db.new_count_order()
    await db.skin(ord, message=message)
    await message.answer(
        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤—Å–∫–æ—Ä–µ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"')
    await message.answer('–ö—Å—Ç–∞—Ç–∏, –≤—Å–µ –Ω–∞—à–∏ —Å–∫–∏–Ω—ã —É–º–µ—é—Ç –º–æ—Ä–≥–∞—Ç—å. üëÄ')
    await message.answer(
        '–ü–æ–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∫–∏–Ω—ã –∏ –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://www.youtube.com/playlist?list=PLVe49ImhHc6k2VwaXj-Hz6GRUU_nFyl16')
    await state.finish()
    await cmd_start(message)


@dp.message_handler(state=cls.OrderSkin.cloak_description2, content_types=['text'])
async def order_skin(message: types.Message, state: FSMContext):
    if (message.text != "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" or message.text != '–ù–∞–∑–∞–¥') and not ("'" in message.text or '"' in message.text):
        item = message.text
        print(item)
        await state.update_data(
            {
                'cloak_description': item
            }
        )

    if message.text != '–ù–∞–∑–∞–¥' and not "'" in message.text and '"' not in message.text:
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                             ".jpeg –∏–ª–∏ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .png –±–µ–∑ —Å–∂–∞—Ç–∏—è, "
                             "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª—É—á—à–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏! –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ, "
                             "–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'", reply_markup=kb.photo_panel)
        await cls.OrderSkin.cloak_photo.set()

    elif "'" in message.text or '"' in message.text:
        await message.answer("–£–±–µ—Ä–∏—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞!")

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –¥–æ–±–∞–≤–∏—Ç—å –∫ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É –ø–ª–∞—â?', reply_markup=kb.agreement_panel)
        await cls.OrderSkin.previous()


@dp.message_handler(state=cls.OrderSkin.cloak_photo, content_types=['document', 'photo', 'text'])
async def order_skin(message: types.Message, state: FSMContext):
    await order_photo(message, all_cloak)

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        await final_order(message, state)

    elif message.text == '–ù–∞–∑–∞–¥':
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–ª–∞—â–∞.", reply_markup=kb.cancel_panel)
        await cls.OrderSkin.previous()

    elif message.text == "–û–ø–ª–∞—Ç–∞":
        data = await state.get_data()
        description_totem = data.get('totem_description')
        description_cloak = data.get('cloak_description')
        if not description_totem:
            await order_2(message, bot, '—Å–∫–∏–Ω', '–ø–ª–∞—â', 249, 79)
        elif description_cloak and description_totem:
            data = await state.get_data()
            totem_type = data.get('totem_type')
            if totem_type == '2D':
                await order_3(message, bot, '—Å–∫–∏–Ω', '2D —Ç–æ—Ç–µ–º', '–ø–ª–∞—â', 249, 49, 79)
            elif totem_type == '3D':
                await order_3(message, bot, '—Å–∫–∏–Ω', '3D —Ç–æ—Ç–µ–º', '–ø–ª–∞—â', 249, 79, 79)


@dp.pre_checkout_query_handler(lambda query: True, state=cls.OrderSkin.cloak_photo)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(state=cls.OrderSkin.cloak_photo, content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succsessful_payment(message: types.Message, state: FSMContext):
    print('–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û')
    data = await state.get_data()
    description_totem = data.get('totem_description')
    totem_type = data.get('totem_type')
    artist_name = data.get('artist')
    artist_id = data.get('artist_id')

    ran = ''.join(choices(string.ascii_uppercase + string.digits, k=10))
    await db.new_count_order()

    ord = await get_ord_skin(message, state, all_photo, rand=ran, price=249)
    ord_cloak = await get_ord_other(message, state, all_cloak, 'cloak_description', artist_id, artist_name, rand=ran, price=79)

    await db.skin(ord, message=message)
    await db.cloak(ord_cloak, message=message)
    if description_totem:

        if totem_type == '2D':
            ord_totem = await get_ord_other(message, state, all_totem, 'totem_description', artist_id, artist_name,
                                           totem_type=totem_type, rand=ran, price=49)
            await db.totem(ord_totem, message=message)
        elif totem_type == '3D':
            ord_totem = await get_ord_other(message, state, all_totem, 'totem_description', artist_id, artist_name,
                                            totem_type=totem_type, rand=ran, price=79)
            await db.totem(ord_totem, message=message)

    await message.answer(
        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ö—É–¥–æ–∂–Ω–∏–∫ –≤—Å–∫–æ—Ä–µ –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç—É! –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"')
    await message.answer('–ö—Å—Ç–∞—Ç–∏, –≤—Å–µ –Ω–∞—à–∏ —Å–∫–∏–Ω—ã —É–º–µ—é—Ç –º–æ—Ä–≥–∞—Ç—å. üëÄ')
    await message.answer(
        '–ü–æ–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –í–∞—à–∏–º –∑–∞–∫–∞–∑–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∫–∏–Ω—ã –∏ –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: https://www.youtube.com/playlist?list=PLVe49ImhHc6k2VwaXj-Hz6GRUU_nFyl16')
    await state.finish()
    await cmd_start(message)

@dp.message_handler(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def my_order(message: types.Message):
    await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã')
    keyboard = await kb.new_order_chat(message.from_user.id, 3)
    await message.answer(f'–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ {keyboard[0]}', reply_markup=keyboard[1])
    await cls.OrderChat.search.set()

num_cust = {}
id_art = {}
all_row = {}
id_cust = {}
@dp.message_handler(state=cls.OrderChat.search, content_types=['document', 'photo', 'text'])
async def cmd_text_order(message: types.Message, state: FSMContext):
    db = sq.connect('voxel.db')
    cur = db.cursor()
    cur.execute('SELECT NAME FROM sqlite_master WHERE TYPE="table"')
    all_current_tables = cur.fetchall()[1:7]
    if message.text != '–ù–∞–∑–∞–¥':

        request = message.text.split()
        all_row[message.from_user.id] = []
        if request[0][1:] in [str(i) for i in range(0, 10000)] and request[0][0] == '‚Ññ' and not message.text.isdigit(): #–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —É –Ω–∞—Å –±—É–¥–µ—Ç 10000 –∑–∞–∫–∞–∑, –∑–Ω–∞–π, –≤ range –ª–∏–º–∏—Ç!!!

            num_cust[message.chat.id] = request[0][1:]
            for i in request[1:]:
                for table in all_current_tables:
                    result = cur.execute(f"SELECT * FROM {table[0]}")
                    print(request[0][1:])
                    for row in result:
                        if row[2] == i and str(row[1]) == request[0][1:]:
                            await message.answer(f"–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {row[2]}: {row[-3]}")
                            if row[2] == '—Å–∫–∏–Ω' or row[2] == '—Ç–æ—Ç–µ–º':
                                await message.answer(f"–¢–∏–ø: {row[-5]}")
                            all_file = str(row[-2])[1:-1].replace("'", "").replace(',', '').split()
                            for file in all_file:
                                try:
                                    await bot.send_photo(message.chat.id, file)
                                except:
                                    await bot.send_document(message.chat.id, file)
                            id_art[message.from_user.id] = row[4]

                            all_row[message.from_user.id].append(row)

            await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º?', reply_markup=kb.agreement_chat_panel)
            await cls.OrderChat.pre_chat.set()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ "–ù–∞–∑–∞–¥",'
                                 ' –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É')
    else:
        await state.finish()
        await cmd_start(message)


@dp.message_handler(state=cls.OrderChat.pre_chat, content_types=['text'])
async def cmd_text_order(message: types.Message):
    keyboard = await kb.new_order_chat(message.from_user.id, 3)
    if message.text == '–î–∞':
        await message.answer(f'–û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º –Ω–æ–º–µ—Ä {num_cust[message.from_user.id]}\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ –≤–ø–∏—à–∏—Ç–µ "–í—ã–π—Ç–∏",'
                             f' –ª–∏–±–æ –Ω–∞–∂–º–∏–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. –ü–æ–∫–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ,'
                             f' –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫—É, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!',
                             reply_markup=kb.exit_ord_panel)
        print(all_row[message.from_user.id])
        await cls.OrderChat.chat.set()

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer(f'–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ {keyboard[0]}', reply_markup=keyboard[1])
        await cls.OrderChat.search.set()

    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!')


@dp.message_handler(state=cls.OrderChat.chat, content_types=['document', 'photo', 'text'])
async def cmd_text_order(message: types.Message):
    keyboard = await kb.new_order_chat(message.from_user.id, 3)

    if message.text == '–í—ã–π—Ç–∏':
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!', reply_markup=keyboard[1])
        await cls.OrderChat.search.set()

    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑":
        await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ: `–ó–ê–í–ï–†–®–ò–¢–¨ –ó–ê–ö–ê–ó`', parse_mode="MARKDOWN", reply_markup=kb.cancel_panel)
        await cls.OrderChat.final_chat.set()

    elif message.photo:
        try:
            documents_id = message.photo[2].file_id

        except IndexError:
            documents_id = message.photo[0].file_id

        await message.bot.send_photo(id_art[message.from_user.id], documents_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ ‚Ññ{num_cust[message.from_user.id]}: {message.caption}')
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úâÔ∏è')

    elif message.text:
        await message.bot.send_message(id_art[message.from_user.id], f'–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ ‚Ññ{num_cust[message.from_user.id]}:\n{message.text}')
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úâÔ∏è')

    elif message.document:
        try:
            documents_id = message.document.file_id
            await message.bot.send_document(id_art[message.from_user.id], documents_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ ‚Ññ{num_cust[message.from_user.id]}: {message.caption}')
            await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úâÔ∏è')
        except:
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!')


@dp.message_handler(state=cls.OrderChat.final_chat, content_types=['text'])
async def cmd_text_order(message: types.Message, state: FSMContext):
    keyboard = await kb.new_order_chat(message.from_user.id, 3)
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer(f'–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ {keyboard[0]}', reply_markup=keyboard[1])
        await cls.OrderChat.search.set()
    elif message.text == '–ó–ê–í–ï–†–®–ò–¢–¨ –ó–ê–ö–ê–ó':
        for ord in all_row[message.from_user.id]:
            if ord[2] == '4D_–°–∫–∏–Ω':
                await db.skin_4d(ord, var=2, message=message)
                await db.skin_4d(ord[1], var=3, message=message)
            elif ord[2] == '—Å–∫–∏–Ω':
                await db.skin(ord, var=2, message=message)
                await db.skin(ord[1], var=3, message=message)
            elif ord[2] == '–∞–≤–∞—Ç–∞—Ä':
                await db.avatar(ord, var=2, message=message)
                await db.avatar(ord[1], var=3, message=message)
            elif ord[2] == '–ø–ª–∞—â':
                await db.cloak(ord, var=2, message=message)
                await db.cloak(ord[1], var=3, message=message)
            elif ord[2] == '—Ç–æ—Ç–µ–º':
                await db.totem(ord, var=2, message=message)
                await db.totem(ord[1], var=3, message=message)

        await bot.send_message(ord[4], f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å ‚Ññ{ord[1]} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑!')
        await message.answer('–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!', reply_markup=kb.menu)
        await state.finish()

@dp.message_handler(text="–ó–∞–∫–∞–∑—ã")
async def cmd_text_artist(message: types.Message):
    if str(message.from_user.id) in db.get_artists_info():
        keyboard = await kb.new_order_chat(message.from_user.id, 4)
        await message.answer(f'–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ {keyboard[0]}', reply_markup=keyboard[1])
        await cls.ArtistPanel.search.set()
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. üòî")


@dp.message_handler(state=cls.ArtistPanel.search, content_types=['document', 'photo', 'text'])
async def cmd_text_artist(message: types.Message, state: FSMContext):
    db = sq.connect('voxel.db')
    cur = db.cursor()
    cur.execute('SELECT NAME FROM sqlite_master WHERE TYPE="table"')
    all_current_tables = cur.fetchall()[1:7]
    if message.text != '–ù–∞–∑–∞–¥':

        request = message.text.split()

        if request[0][1:] in [str(i) for i in range(0, 10000)] and request[0][0] == '‚Ññ' and not message.text.isdigit():

            num_cust[message.from_user.id] = request[0][1:]
            for i in request[1:]:
                for table in all_current_tables:
                    result = cur.execute(f"SELECT * FROM {table[0]}")
                    for row in result:
                        if row[2] == i and str(row[1]) == request[0][1:]:
                            await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–∞ {row[2]}: {row[-3]}")
                            if row[2] == '—Å–∫–∏–Ω' or row[2] == '—Ç–æ—Ç–µ–º':
                                await message.answer(f"–¢–∏–ø: {row[-5]}")
                            all_file = str(row[-2])[1:-1].replace("'", "").replace(',', '').split()
                            for file in all_file:
                                try:
                                    await bot.send_photo(message.chat.id, file)
                                except:
                                    await bot.send_document(message.chat.id, file)
                            id_cust[message.from_user.id] = row[3]

            await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º?', reply_markup=kb.agreement_chat_panel)
            await cls.ArtistPanel.pre_chat.set()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ "–ù–∞–∑–∞–¥",'
                                 ' –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É')
    else:
        await state.finish()
        await cmd_start(message)


@dp.message_handler(state=cls.ArtistPanel.pre_chat, content_types=['text'])
async def cmd_text_artist(message: types.Message):
    keyboard = await kb.new_order_chat(message.from_user.id, 4)
    if message.text == '–î–∞':
        await message.answer(f'–û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –Ω–æ–º–µ—Ä {num_cust[message.from_user.id]}\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ –≤–ø–∏—à–∏—Ç–µ "–í—ã–π—Ç–∏",'
                             f' –ª–∏–±–æ –Ω–∞–∂–º–∏–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ,'
                             f' –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∑–∞–∫–∞–∑—á–∏–∫—É, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!',
                             reply_markup=kb.exit_panel)
        await cls.ArtistPanel.chat.set()

    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer(f'–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ {keyboard[0]}', reply_markup=keyboard[1])
        await cls.ArtistPanel.search.set()
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!')


@dp.message_handler(state=cls.ArtistPanel.chat, content_types=['document', 'photo', 'text'])
async def cmd_text_artist(message: types.Message):
    keyboard = await kb.new_order_chat(message.from_user.id, 4)

    if message.text == '–í—ã–π—Ç–∏':
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!', reply_markup=keyboard[1])
        await cls.ArtistPanel.search.set()

    elif message.photo:
        try:
            documents_id = message.photo[2].file_id

        except IndexError:
            documents_id = message.photo[0].file_id

        await message.bot.send_photo(id_cust[message.from_user.id], documents_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{num_cust[message.from_user.id]}')
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úâÔ∏è')

    elif message.text:
        await message.bot.send_message(id_cust[message.from_user.id], f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{num_cust[message.from_user.id]}:\n{message.text}')
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úâÔ∏è')

    elif message.document:
        try:
            documents_id = message.document.file_id
            await message.bot.send_document(id_cust[message.from_user.id], documents_id, caption=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{num_cust[message.from_user.id]}')
            await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úâÔ∏è')
        except:
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!')


@dp.message_handler(text='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
async def cmd_text_admins(message: types.Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏', reply_markup=kb.admins_panel)
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. üòî")


@dp.message_handler(text="–ü–∞–Ω–µ–ª—å —Ö—É–¥–æ–∂–Ω–∏–∫–∞")
async def cmd_text_artist(message: types.Message):
    if str(message.from_user.id) in db.get_artists_info():
        await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.artist_personal_panel)
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. üòî")


@dp.message_handler(text="–ë–∞–ª–∞–Ω—Å")
async def cmd_text_artist(message: types.Message):
    if str(message.from_user.id) in db.get_artists_info():
        money = await kb.get_money(message.from_user.id) // 2
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {money} —Ä—É–±–ª–µ–π! –ú—ã –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞')
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. üòî")



@dp.message_handler()
async def answer(message: types.Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. üòî")
